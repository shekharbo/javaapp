
name: Build and Deploy to AWS ECR

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Install MySQL client
        run: sudo apt-get update && sudo apt-get install -y mysql-client
      - name: Start MySQL Service
        run: sudo systemctl start mysql
      - name: Change MySQL Root Password
        run: |
          mysql -u root -proot -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'Cybage@123';"

      - name: Grant Privileges to Root User
        run: |
          mysql -h localhost -u root -pCybage@123 -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost' WITH GRANT OPTION;"
      - name: Create Database
        run: |
          mysql -h localhost -u root -pCybage@123 -e "CREATE DATABASE employees;"
      # Step 1: Checkout the repository code
      - name: Checkout Code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Step 2: Set up JDK 17 for building the JAR file
      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '17'

      # Step 4: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-maven

      # Step 5: Build the project and run unit tests with JaCoCo for test coverage
      - name: Build with Maven
        run: mvn clean verify
      - name: Generate JaCoCo report
        run: mvn jacoco:report
      
      - name: Archive JaCoCo report
        uses: actions/upload-artifact@v2
        with:
          name: jacoco-report
          path: target/site/jacoco

      - name: check in file
        run: |
          ls /home/runner/work/employee-management/employee-management/target/site/jacoco/
          
      - name: Build and package JAR
        run: mvn clean package

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: 'us-east-1'

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build Docker image
        run: docker build -t githubaction-poc .

      - name: Tag Docker image
        run: |
          docker tag githubaction-poc:latest 781365762844.dkr.ecr.us-east-1.amazonaws.com/githubaction-poc:latest

      - name: Install Trivy
        run: |
          sudo apt-get install wget
          wget https://github.com/aquasecurity/trivy/releases/download/v0.39.1/trivy_0.39.1_Linux-64bit.deb
          sudo dpkg -i trivy_0.39.1_Linux-64bit.deb

      - name: Scan Docker image with Trivy
        run: |
          trivy image --severity HIGH,CRITICAL 781365762844.dkr.ecr.us-east-1.amazonaws.com/githubaction-poc:latest
      
      - name: Push Docker image to ECR
        run: |
          docker push 781365762844.dkr.ecr.us-east-1.amazonaws.com/githubaction-poc:latest
      
  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:          
    - name: Set up SSH
      run: echo "$SSH_PRIVATE_KEY" > ~/key.pem
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Set permissions for key.pem
      run: chmod 400 ~/key.pem

    - name: Deploy to EC2
      run: |
        ssh -i ~/key.pem -o StrictHostKeyChecking=no ec2-user@54.237.60.171 'rm -rf ~/employee*'
        ssh -i ~/key.pem -o StrictHostKeyChecking=no ec2-user@54.237.60.171 'git clone https://rushikeshmj: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@github.com/rushikeshmj/employee-management.git'
        ssh -i ~/key.pem -o StrictHostKeyChecking=no ec2-user@54.237.60.171 'sudo chmod +x ~/employee-management/deploy/deploy.sh'
        ssh -i ~/key.pem -o StrictHostKeyChecking=no ec2-user@54.237.60.171 'sh ~/employee-management/deploy/deploy.sh'
      

              
